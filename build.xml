<!--
    Copyright (C) 2004-2014 Orbeon, Inc.

    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.

    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
-->
<project name="orbeon" default="orbeon-dev-war" xmlns:xdb="http://exist-db.org/ant">

    <!-- Properties to update when version number changes -->
    <property name="version.number" value="2016.2.1"/>
    <property name="edition"        value="CE"/>

    <property file="build-local.properties"/>

    <property name="saxon.jar"     value="saxon-9-1-0-8_orbeon_20160615.jar"/>

    <!-- Expose environment variables -->
    <property environment="env"/>

    <!-- JUnit tasks -->
    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
        <classpath>
            <pathelement location="lib/junit-4.11.jar"/>
            <pathelement location="lib/ant-junit-1.7.1.jar"/>
        </classpath>
    </taskdef>

    <!-- Ant task for the YUI Compressor -->
    <!-- http://code.google.com/p/javaflight-code/wiki/YuiCompressorAntTask -->
    <taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
        <classpath>
            <pathelement location="lib/yui-compressor-ant-task-0.5.jar"/>
            <pathelement location="lib/jargs-1.0.jar"/>
            <pathelement location="lib/yuicompressor-2.4.7.jar"/>
        </classpath>
    </taskdef>

    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">
        <classpath>
            <pathelement location="lib/jarjar-1.3.jar"/>
        </classpath>
    </taskdef>

    <!-- ant-contrib, for tasks like <if> -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <taskdef
        resource="proguard/ant/task.properties"
        classpath="lib/proguard-5.2.1.jar"/>

    <fileset id="war.libs" dir="lib">

        <include name="orbeon-errorified-20150511.jar"/>

        <!-- These JARs are checked in. They can be rebuilt with the jarjar target -->
        <include name="xerces-2.11-orbeon.jar"/>
        <include name="msv-20081113-orbeon.jar"/>

        <include name="slf4j-api-1.7.7.jar"/>
        <include name="slf4j-log4j12-1.7.7.jar"/>
        <include name="jcl-over-slf4j-1.7.7.jar"/>
        <include name="log4j-1.2.17.jar"/>
        <include name="jaxen-1_1_beta_9.jar"/>
        <include name="saxpath-dev_orbeon.jar"/>

        <include name="commons-beanutils-1_5.jar"/>
        <include name="commons-cli-1_0.jar"/>
        <include name="commons-codec-1.6.jar"/>
        <include name="commons-collections-3.2.2.jar"/>
        <include name="commons-digester-1_5.jar"/>
        <include name="commons-discovery-0.4.jar"/>
        <include name="commons-fileupload-1.2.2.jar"/>
        <include name="commons-io-2.0.1.jar"/>
        <include name="commons-lang3-3.1.jar"/>
        <include name="commons-pool-1.6.jar"/>
        <include name="commons-validator-1.4.0.jar"/>
        <include name="joda-time-2.1.jar"/> <!--We don't include joda-convert-1.2.jar; it is only a compile-time dependency for Scala -->
        <include name="httpclient-4.3.5.jar"/>
        <!--<include name="httpclient-cache-4.1.jar"/>-->
        <include name="httpcore-4.3.2.jar"/>
        <include name="httpmime-4.3.5.jar"/>

        <include name="apache-mime4j-0.6.jar"/>
        <include name="jcifs-1.3.14.jar"/>

        <include name="axis_1_2_1-axis.jar"/>
        <include name="axis_1_2_1-jaxrpc.jar"/>
        <include name="axis_1_2_1-saaj.jar"/>
        <include name="axis_1_2_1-wsdl4j-1.5.1.jar"/>

        <include name="jfreechart-1.0.9.jar"/>
        <include name="jfreechart-dependency-jcommon-1.0.12.jar"/>
        <include name="activation-1.1.1.jar"/>
        <include name="jtidy-8.0-20060801.131059-3.jar"/>
        <include name="tagsoup-1.2.jar"/>
        <include name="${saxon.jar}"/>
        <include name="batik-all-1_7.jar"/>
        <include name="batic-dependency-xmlgraphics-commons-1.4.jar"/>
        <include name="avalon-framework-4_2_0.jar"/>
        <include name="fop-1_0.jar"/>
        <include name="jakarta-poi*"/>
        <include name="metadata-extractor-2.7.0.SNAPSHOT.jar"/>
        <include name="metadata-extractor-dependency-xmpcore-5.1.2.jar"/>
        <include name="castor-0_9_4_3-xml.jar"/>

        <include name="exist-1_4_1_dev_orbeon_20110104.jar"/>
        <include name="exist-optional-1_4_1_dev_orbeon_20110104.jar"/>
        <include name="exist-modules-1_4_1_dev_orbeon_20110104.jar"/>
        <include name="exist-ngram-module-1_4_1_dev_orbeon_20110104.jar"/>
        <include name="exist-lucene-module-1_4_1_dev_orbeon_20110104.jar"/>

        <include name="exist-dependency-antlr-2.7.7.jar"/>
        <include name="exist-dependency-jgroups-all-2.2.6.jar"/>
        <include name="exist-dependency-jta-1.1.jar"/>
        <include name="exist-dependency-quartz-1.6.6.jar"/>
        <include name="exist-dependency-stax-api-1.0.1.jar"/>
        <include name="exist-dependency-ws-commons-util-1.0.2.jar"/>
        <include name="exist-dependency-xmldb.jar"/>
        <include name="exist-dependency-xmlrpc-client-3.1.2.jar"/>
        <include name="exist-dependency-xmlrpc-common-3.1.2.jar"/>
        <include name="exist-dependency-xmlrpc-server-3.1.2.jar"/>
        <include name="exist-dependency-lucene-core-2.9.2.jar"/>
        <include name="exist-dependency-lucene-regex-2.9.2.jar"/>
        <include name="exist-dependency-resolver-1.2.jar"/>

        <include name="ehcache-core-2.6.3.jar"/>

        <include name="scala-library-2.11.8.jar"/>
        <include name="scala-xml_2.11-1.0.4.jar"/>
        <include name="sbinary_2.11-SNAPSHOT.jar"/>

        <include name="rhino-1.7R2.jar"/>

        <include name="flying-saucer-core-9.0.2-20140523.jar"/>
        <include name="flying-saucer-pdf-9.0.2-20140523.jar"/>
        <include name="flying-saucer-dependency-itext-2.1.7.jar"/>
        <include name="itext-bcmail-jdk14-138.jar"/>
        <include name="itext-bcprov-jdk14-138.jar"/>

        <!-- oxf:pdf-to-image -->
        <include name="icepdf-core-5.1.1.jar"/>
        <include name="jai-imageio-core-1.3.1-SNAPSHOT.jar"/>
        <include name="jai-core-1.1.3.jar"/>

        <include name="barcode4j-1.0.jar"/>
        <include name="simplecaptcha-1.2.1.jar"/>

        <include name="jms-api-1_1.jar"/>
        <include name="mail-1_3_2.jar"/>

        <!-- For directory scanner and SSH support -->
        <include name="ant-1_6_5.jar"/>

        <!-- For SSH support (currently in oxf:file processor) -->
        <include name="ant-jsch-1_6_5.jar"/>
        <include name="jsch-0.1.42.jar"/>

        <!-- For the XQuery Processor -->
        <include name="xqjapi.jar"/>
        <include name="xqj2-0.0.1.jar"/>
        <include name="exist-xqj-1.0.1.jar"/>

        <!-- Parsing and JSON -->
        <include name="parboiled-core-1.1.7.jar"/>
        <include name="parboiled-scala_2.11-1.1.7.jar"/>
        <include name="spray-json_2.11-1.3.2.jar"/>

    </fileset>

    <target name="init">
        <tstamp>
            <format property="time" pattern="yyyyMMddHHmm" timezone="GMT"/>
        </tstamp>
        <property name="release.number"                 value="${version.number}.${time}"/>
        <property name="versioned-name"                 value="orbeon-${release.number}-${edition}"/>
        <property name="unversioned-name"               value="orbeon-${edition}"/>
        <property name="versioned-proxy-portlet-name"   value="orbeon-${release.number}-proxy-portlet"/>
        <property name="unversioned-proxy-portlet-name" value="orbeon-proxy-portlet"/>

        <property name="examples-cli-src.dir"           value="src/examples-cli"/>
        <property name="test.exist-db.dir"              location="src/resources-packaged/ops/unit-tests/exist-data"/>

        <property name="xforms-filter.jar.file"         value="build/lib/orbeon-xforms-filter.jar"/>
        <property name="cli.jar.file"                   value="build/lib/orbeon-cli.jar"/>
        <property name="resources-private.jar.file"     value="build/lib/orbeon-resources-private.jar"/>
        <property name="resources-public.jar.file"      value="build/lib/orbeon-resources-public.jar"/>

        <!-- User-friendly message -->
        <echo message="Building Orbeon Forms ${release.number}"/>
        <echo message="Using Ant ${ant.version}"/>
    </target>

    <target name="sbt-clean" depends="init" description="Remove all sbt-generated files">
        <exec executable="sbt" failonerror="true">
            <arg value="-Dorbeon.version=${release.number}"/>
            <arg value="-Dorbeon.edition=${edition}"/>
            <arg value="project root"/>
            <arg value="clean"/>
        </exec>
    </target>

    <target name="clean-keep-exist" depends="sbt-clean" description="Remove all generated files except the local eXist database">
        <delete includeEmptyDirs="true">
            <fileset dir="build">
                <exclude name="orbeon-war/WEB-INF/exist-data"/>
                <exclude name="orbeon-war/WEB-INF/exist-data/**"/>
            </fileset>
        </delete>
    </target>

    <target name="clean" depends="clean-keep-exist" description="Remove all generated files except the local eXist database"/>

    <target name="mega-clean" depends="sbt-clean" description="Remove all generated files">
        <delete dir="build"/>
    </target>

    <target name="prepare" depends="init">
        <mkdir dir="build/lib"/>
    </target>

    <target name="jarjar" depends="prepare">
        <!-- Xerces fat JAR -->
        <jarjar jarfile="lib/xerces-2.11-orbeon.jar">
            <zipfileset src="lib/src/xerces-resolver-2.11.jar">
                <!-- Don't expose any services -->
                <exclude name="META-INF/services/**"/>
            </zipfileset>
            <zipfileset src="lib/src/xerces-resolver-2.11.jar">
                <!-- Don't expose any services -->
                <exclude name="META-INF/services/**"/>
            </zipfileset>
            <zipfileset src="lib/src/xerces-xercesImpl-2.11.jar">
                <!-- Don't expose any services -->
                <exclude name="META-INF/services/**"/>
            </zipfileset>
            <rule pattern="org.apache.**" result="orbeon.apache.@1"/>
        </jarjar>
        <!-- MSV fat JAR -->
        <jarjar jarfile="lib/msv-20081113-orbeon.jar">
            <zipfileset src="lib/src/msv-20081113_orbeon_20081209.jar"/>
            <zipfileset src="lib/src/msv-isorelax-20070407.jar"/>
            <zipfileset src="lib/src/msv-relaxngDatatype-20070407.jar"/>
            <zipfileset src="lib/src/msv-xsdlib-20070407_orbeon_20120712.jar"/>
            <rule pattern="com.sun.msv.**"          result="org.orbeon.msv.@1"/>
            <rule pattern="com.sun.xml.**"          result="org.orbeon.msv.xml.@1"/>
            <rule pattern="org.iso_relax.**"        result="org.orbeon.msv.iso_relax.@1"/>
            <rule pattern="jp.gr.xml.relax.**"      result="org.orbeon.msv.gr.xml.relax.@1"/>
            <rule pattern="org.relaxng.datatype.**" result="org.orbeon.msv.relaxng.datatype.@1"/>
        </jarjar>
    </target>

    <!-- Set classpath to compile and run the application -->
    <target name="classpath" depends="prepare">
        <path id="class.path">
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </target>

    <!-- Compile source -->
    <target name="classes" depends="classpath" unless="skip.compilation">
        <exec executable="sbt" failonerror="true">
            <arg value="-Dorbeon.version=${release.number}"/>
            <arg value="-Dorbeon.edition=${edition}"/>
            <arg value="project root"/>
            <arg value="compile"/>
        </exec>
    </target>

    <!-- Compile test source -->
    <target name="test-classes" depends="init" unless="skip.compilation">
        <exec executable="sbt" failonerror="true">
            <arg value="-Dorbeon.version=${release.number}"/>
            <arg value="-Dorbeon.edition=${edition}"/>
            <arg value="project root"/>
            <arg value="test:compile"/>
        </exec>
    </target>

    <target name="embedding-jar" depends="classes">
        <local name="temp.jar"/>
        <tempfile property="temp.jar" suffix=".jar" destdir="build/temp" deleteonexit="true"/>
        <proguard>
            -verbose
            -dontobfuscate
            -dontnote
            -dontwarn
            -ignorewarnings
            -forceprocessing

            -injars      common/target/scala-2.11/classes
            -injars      src/target/scala-2.11/classes

            -injars      lib/commons-io-2.0.1.jar
            -injars      lib/commons-lang3-3.1.jar
            -injars      lib/commons-codec-1.6.jar
            -injars      lib/scala-library-2.11.8.jar
            -injars      lib/orbeon-errorified-20150511.jar
            -injars      lib/httpclient-4.3.5.jar
            -injars      lib/httpclient-cache-4.3.5.jar
            -injars      lib/httpcore-4.3.2.jar
            -injars      lib/httpmime-4.3.5.jar
            -injars      lib/jcl-over-slf4j-1.7.7.jar

            -outjars     ${temp.jar}(!apps/**,!forms/**,!config/**,!oxf/**,!templates/**,!META-INF/**,!xbl/**,!ops/**,!**.gif,!**.png,!**.jpg,!**.css,!**.html,!*.properties,!*.xml,!*.txt)
            <!-- -outjars     build/lib/check-resources.jar -->

            -libraryjars ${java.home}/lib/rt.jar
            -libraryjars lib/servlet-2_3-4_0_4.jar
            -libraryjars lib/slf4j-api-1.7.7.jar
            -libraryjars lib/liferay-portal-service-6.1.1.jar

            <!-- Seeds: servlet filter and the public API -->
            -keep public class org.orbeon.oxf.fr.embedding.servlet.ServletFilter
            -keep public class org.orbeon.oxf.fr.embedding.servlet.API {
                public static *;
            }
            <!-- For HttpClient -->
            -keep public class org.apache.commons.logging.impl.LogFactoryImpl {
                public *;
            }
            -keep public class org.apache.commons.logging.impl.Jdk14Logger {
                public *;
            }
        </proguard>
        <jarjar jarfile="build/lib/orbeon-embedding.jar">
            <zipfileset src="${temp.jar}"/>
            <rule pattern="org.orbeon.oxf.fr.embedding.servlet.ServletFilter*" result="org.orbeon.oxf.fr.embedding.servlet.ServletFilter@1"/>
            <rule pattern="org.orbeon.oxf.fr.embedding.servlet.API*"           result="org.orbeon.oxf.fr.embedding.servlet.API@1"/>
            <rule pattern="org.orbeon.**"                                      result="org.orbeon.private.orbeon.@1"/>
            <rule pattern="org.apache.**"                                      result="org.orbeon.private.apache.@1"/>
            <rule pattern="scala.**"                                           result="org.orbeon.private.scala.@1"/>
        </jarjar>
        <delete file="${temp.jar}"/>
    </target>

    <target name="proxy-portlet-jar" depends="classes">
        <local name="temp.jar"/>
        <tempfile property="temp.jar" suffix=".jar" destdir="build/temp" deleteonexit="true"/>
        <proguard>
            -verbose
            -dontobfuscate
            -dontnote
            -dontwarn
            -ignorewarnings
            -forceprocessing

            -injars      common/target/scala-2.11/classes
            -injars      src/target/scala-2.11/classes

            -injars      lib/commons-io-2.0.1.jar
            -injars      lib/commons-lang3-3.1.jar
            -injars      lib/commons-codec-1.6.jar
            -injars      lib/scala-library-2.11.8.jar
            -injars      lib/scala-xml_2.11-1.0.4.jar
            -injars      lib/orbeon-errorified-20150511.jar
            -injars      lib/httpclient-4.3.5.jar
            -injars      lib/httpclient-cache-4.3.5.jar
            -injars      lib/httpcore-4.3.2.jar
            -injars      lib/httpmime-4.3.5.jar
            -injars      lib/jcl-over-slf4j-1.7.7.jar

            -outjars     ${temp.jar}(!apps/**,!forms/**,!config/**,!oxf/**,!templates/**,!META-INF/**,!xbl/**,!ops/**,!**.gif,!**.png,!**.jpg,!**.css,!**.html,!*.properties,!*.xml,!*.txt)

            -libraryjars ${java.home}/lib/rt.jar
            -libraryjars lib/servlet-2_3-4_0_4.jar
            -libraryjars lib/portlet-api_2.0.jar
            -libraryjars lib/slf4j-api-1.7.7.jar

            <!-- Seeds: servlet filter and the public API -->
            -keep public class org.orbeon.oxf.portlet.OrbeonProxyPortlet
            <!-- Auth filter -->
            -keep public class org.orbeon.oxf.portlet.liferay.AddLiferayUserHeadersFilter {
                public *;
            }
            <!-- For HttpClient -->
            -keep public class org.apache.commons.logging.impl.LogFactoryImpl {
                public *;
            }
            -keep public class org.apache.commons.logging.impl.Jdk14Logger {
                public *;
            }
        </proguard>
        <jarjar jarfile="build/lib/orbeon-proxy-portlet.jar">
            <zipfileset src="${temp.jar}"/>
            <rule pattern="org.orbeon.oxf.portlet.OrbeonProxyPortlet*"                  result="org.orbeon.oxf.portlet.OrbeonProxyPortlet@1"/>
            <rule pattern="org.orbeon.oxf.portlet.liferay.AddLiferayUserHeadersFilter*" result="org.orbeon.oxf.portlet.liferay.AddLiferayUserHeadersFilter@1"/>
            <rule pattern="org.orbeon.**"                                               result="org.orbeon.private.orbeon.@1"/>
            <rule pattern="org.apache.**"                                               result="org.orbeon.private.apache.@1"/>
            <rule pattern="scala.**"                                                    result="org.orbeon.private.scala.@1"/>
        </jarjar>
        <delete file="${temp.jar}"/>
    </target>

    <target name="xforms-filter-jar" depends="classes">

        <local name="temp.jar"/>
        <tempfile property="temp.jar" suffix=".jar" destdir="build/temp" deleteonexit="true"/>
        <proguard>
            -verbose
            -dontobfuscate
            -dontnote
            -dontwarn
            -ignorewarnings
            -forceprocessing

            -injars      common/target/scala-2.11/classes
            -injars      src/target/scala-2.11/classes

            -injars      lib/commons-io-2.0.1.jar
            -injars      lib/commons-lang3-3.1.jar
            -injars      lib/scala-library-2.11.8.jar
            -injars      lib/orbeon-errorified-20150511.jar

            -outjars     ${temp.jar}(!apps/**,!forms/**,!config/**,!oxf/**,!templates/**,!META-INF/**,!xbl/**,!ops/**,!**.gif,!**.png,!**.jpg,!**.css,!**.html,!*.properties,!*.xml,!*.txt)

            -libraryjars ${java.home}/lib/rt.jar
            -libraryjars lib/servlet-2_3-4_0_4.jar

            -keep public class org.orbeon.oxf.servlet.OrbeonXFormsFilter {
                public static *;
            }
        </proguard>
        <jarjar jarfile="${xforms-filter.jar.file}">
            <zipfileset src="${temp.jar}"/>
            <rule pattern="org.orbeon.oxf.servlet.OrbeonXFormsFilter*" result="org.orbeon.oxf.servlet.OrbeonXFormsFilter@1"/>
            <rule pattern="org.orbeon.**"                              result="org.orbeon.private.orbeon.@1"/>
            <rule pattern="org.apache.**"                              result="org.orbeon.private.apache.@1"/>
            <rule pattern="scala.**"                                   result="org.orbeon.private.scala.@1"/>
        </jarjar>
        <delete file="${temp.jar}"/>
    </target>

    <!-- JARs -->
    <target name="jars" depends="classes, orbeon-minify-js, embedding-jar, xforms-filter-jar">

        <!-- This packages core, dom, xupdate, common, etc. -->
        <exec executable="sbt" failonerror="true">
            <arg value="-Dorbeon.version=${release.number}"/>
            <arg value="-Dorbeon.edition=${edition}"/>
            <arg value="project root"/>
            <arg value="package"/>
        </exec>

        <property name="cli.jar.lib.dir" location="lib"/>
        <pathconvert dirsep="/" pathsep=" " property="cli.jar.mf.cp" refid="war.libs">
          <map from="${cli.jar.lib.dir}" to="lib"/>
        </pathconvert>

        <jar destfile="${cli.jar.file}" compress="false">
          <manifest>
            <attribute name="Main-Class" value="org.orbeon.oxf.main.OPS"/>
            <attribute name="Class-Path" value="lib/orbeon-core.jar lib/orbeon-dom.jar lib/orbeon-common.jar lib/orbeon-xforms-filter.jar lib/orbeon-resources-private.jar commons-cli-1_0.jar ${cli.jar.mf.cp}"/>
          </manifest>
        </jar>

        <!-- Build private resources JAR -->
        <jar destfile="${resources-private.jar.file}" compress="false">
            <fileset dir="src/resources-packaged">
                <include name="xbl/**/*.xbl"/>
                <include name="xbl/**/*.xsl"/>
                <include name="xbl/**/*.xml"/>
                <include name="ops/**"/>
                <exclude name="ops/unit-tests"/>
                <exclude name="ops/unit-tests/**"/>
                <exclude name="ops/**/*.css"/>
                <exclude name="ops/**/*.js"/>
                <exclude name="ops/**/*.gif"/>
                <exclude name="ops/**/*.png"/>
                <exclude name="ops/**/*.ico"/>
                <exclude name="ops/**/*.jpg"/>
                <exclude name="ops/**/*.html"/>
                <exclude name="ops/**/*.htm"/>
                <exclude name="ops/**/*.htc"/>
                <include name="oxf/**"/>
                <include name="config/**"/>
                <exclude name="config/theme"/>
                <exclude name="config/theme/**"/>
                <!-- We keep these in orbeon.jar -->
                <exclude name="config/*-processors.xml"/>
            </fileset>
        </jar>

        <!-- Build public resources JAR -->
        <jar destfile="${resources-public.jar.file}" compress="false">
            <fileset dir="src/resources-packaged">
                <include name="xbl/**/*.css"/>
                <include name="xbl/**/*.js"/>
                <include name="xbl/**/*.gif"/>
                <include name="xbl/**/*.png"/>
                <include name="xbl/**/*.jpg"/>
                <include name="xbl/**/*.html"/>
                <include name="xbl/**/*.htm"/>
                <include name="xbl/**/*.xhtml"/>
                <include name="ops/**/*.css"/>
                <include name="ops/**/*.js"/>
                <include name="ops/**/*.gif"/>
                <include name="ops/**/*.png"/>
                <include name="ops/**/*.ico"/>
                <include name="ops/**/*.jpg"/>
                <include name="ops/**/*.html"/>
                <include name="ops/**/*.htm"/>
                <include name="config/theme/**/*.*"/>
            </fileset>
            <zipfileset dir="build/orbeon-war/WEB-INF/resources">
                <include name="**/*.js"/>
                <exclude name="apps/fr/style/bootstrap-src/**/*.*"/>
            </zipfileset>
        </jar>

    </target>

    <target name="war-common" depends="jars">

        <echo message="Creating WAR for target ${target}"/>

        <copy todir="build/orbeon-war/WEB-INF/lib">
            <fileset refid="war.libs"/>
        </copy>
        <!-- Make sure we remove PathMap from Saxon as we have our own implementation -->
        <delete file="build/orbeon-war/WEB-INF/lib/${saxon.jar}"/>
        <jar destfile="build/orbeon-war/WEB-INF/lib/${saxon.jar}">
            <zipfileset src="lib/${saxon.jar}" excludes="org/orbeon/saxon/expr/PathMap*.class"/>
        </jar>

        <!-- This copies the JAR files to the exploded WAR -->
        <exec executable="sbt" failonerror="true">
            <arg value="-Dorbeon.version=${release.number}"/>
            <arg value="-Dorbeon.edition=${edition}"/>
            <arg value="project root"/>
            <arg value="copyJarToExplodedWar"/>
        </exec>

        <copy file="${xforms-filter.jar.file}"     todir="build/orbeon-war/WEB-INF/lib"/>
        <copy file="${resources-private.jar.file}" todir="build/orbeon-war/WEB-INF/lib"/>
        <copy file="${resources-public.jar.file}"  todir="build/orbeon-war/WEB-INF/lib"/>

        <copy todir="build/orbeon-war/WEB-INF">
            <fileset dir="lib">
                <include name="commons-cli-1_0.jar"/>
            </fileset>
        </copy>
        <copy file="${cli.jar.file}" todir="build/orbeon-war/WEB-INF"/>
        <copy todir="build/orbeon-war/xforms-jsp">
            <fileset dir="src/examples-jsp">
                <include name="**"/>
            </fileset>
        </copy>

        <!-- Copy descriptors -->
        <copy todir="build/orbeon-war/WEB-INF">
            <fileset dir="descriptors/orbeon-war"/>
        </copy>
        <xslt in="build.xml" style="descriptors/orbeon-war-web.xsl" out="build/orbeon-war/WEB-INF/web.xml" force="true">
            <param name="target"     expression="${target}"/>
            <param name="build-root" expression="${basedir}"/>
            <param name="version"    expression="${release.number} ${edition}"/>
            <param name="edition"    expression="${edition}"/>
        </xslt>

        <copy todir="build/orbeon-war/WEB-INF/resources">
            <fileset dir="src/resources"/>
        </copy>

    </target>

    <target name="orbeon-dev-war" depends="prepare" description="Create exploded WAR">

        <antcall target="war-common">
            <param name="skip.compilation" value="${skip.compilation}"/>
            <param name="target"           value="dev"/>
        </antcall>

        <!-- web.xml creates a resource manager pointing to this directory and it must exist -->
        <mkdir dir="src/resources-local"/>
    </target>

    <target name="orbeon-war" depends="orbeon-dev-war" description="Create exploded WAR (legacy name)"/>

    <target name="orbeon-dist-war" depends="prepare, exist-import-sample-data-to-build" description="Creates Orbeon Forms WAR">

        <antcall target="war-common">
            <param name="skip.compilation" value="${skip.compilation}"/>
            <param name="target"           value="dist"/>
        </antcall>

        <mkdir dir="build/distrib"/>

        <zip zipfile="build/distrib/${versioned-name}.war">
            <zipfileset dir="build/orbeon-war">
                <!-- This is already added to orbeon-resources-public.jar -->
                <exclude name="WEB-INF/resources/ops"/>
                <exclude name="WEB-INF/resources/ops/**"/>
                <!-- Filter local eXist that that might be in there -->
                <exclude name="WEB-INF/exist-data/**"/>
            </zipfileset>
            <!-- eXist sample database -->
            <zipfileset dir="build/exist-data" prefix="WEB-INF/exist-data">
                <exclude name="*.log"/>
                <exclude name="*.lck"/>
            </zipfileset>
            <!-- README.txt file -->
            <zipfileset dir="descriptors/orbeon-war/exist-data" prefix="WEB-INF/exist-data"/>
        </zip>
    </target>

    <target name="proxy-portlet-war" depends="proxy-portlet-jar" description="Create proxy portlet WAR">
    	<mkdir dir="build/distrib"/>
        <war destfile="build/distrib/${versioned-proxy-portlet-name}.war">
            <webinf dir="descriptors/proxy-portlet/WEB-INF"/>
            <lib dir="build/lib">
                <include name="orbeon-proxy-portlet.jar"/>
            </lib>
            <lib dir="lib">
                <include name="slf4j-api-1.7.7.jar"/>
                <include name="slf4j-log4j12-1.7.7.jar"/>
                <include name="log4j-1.2.17.jar"/>
            </lib>
        </war>
    </target>

    <target name="embedding-war" depends="embedding-jar" description="Create embedding WAR">
    	<mkdir dir="build/distrib"/>
        <war destfile="build/distrib/orbeon-${release.number}-embedding.war">
            <webinf dir="descriptors/embedding/WEB-INF"/>
            <lib dir="build/lib">
                <include name="orbeon-embedding.jar"/>
            </lib>
            <lib dir="lib">
                <include name="slf4j-api-1.7.7.jar"/>
            </lib>
            <zipfileset dir="descriptors/embedding" prefix="">
                <include name="*.jsp"/>
            </zipfileset>
        </war>
    </target>

    <target name="orbeon-auth-war" depends="jars" description="Creates Orbeon Forms orbeon-auth.war">
        <mkdir dir="build/distrib"/>
        <war destfile="build/distrib/orbeon-auth.war" webxml="descriptors/orbeon-auth-war/web.xml">
            <zipfileset dir="src/target/scala-2.11/classes" prefix="WEB-INF/classes">
                <include name="org/orbeon/oxf/controller/AuthorizerServlet*.class"/>
            </zipfileset>
        </war>
    </target>

    <!-- Zip sources file -->
    <target name="orbeon-src" depends="prepare" description="Create Zip file with the sources">
        <mkdir dir="build/distrib"/>
        <zip zipfile="build/distrib/${versioned-name}-src.zip">
            <zipfileset dir="${basedir}">
                <exclude name="**/.git"/>
                <exclude name="**/.git/**"/>
                <exclude name="build"/>
                <exclude name="build/**"/>
                <exclude name="target"/>
                <exclude name="target/**"/>
                <exclude name="cache"/>
                <exclude name="cache/**"/>
                <exclude name="tmp"/>
                <exclude name="tmp/**"/>
                <exclude name="tools"/>
                <exclude name="tools/**"/>
                <exclude name="src/resources-local"/>
                <exclude name="src/resources-local/**"/>
                <!-- In case there were some temporary files left by the ProGuard tasks here -->
                <exclude name="*.jar"/>
                <!-- In case there are some leftover log files -->
                <exclude name="*.log"/>
                <!-- Not sure why JUnit outputs those here -->
                <exclude name="junit*.properties"/>
                <!-- Don't include a license with the source -->
                <exclude name="**/license.xml"/>
                <!--  No travis build -->
                <exclude name=".travis.yml"/>
            </zipfileset>
        </zip>
    </target>

    <target name="orbeon-minify-js" depends="init, classes">
        <!-- Store those under build/orbeon-war/WEB-INF/resources so they can be used in dev mode -->
        <mkdir dir="build/orbeon-war/WEB-INF/resources/ops"/>
        <mkdir dir="build/js"/>

        <!-- Ant task to compile CoffeeScript -->
        <!-- Defined here (instead of the beginning of this file) as CoffeeScriptTask needs to be compiled first -->
        <taskdef name="coffee-script" classname="org.orbeon.oxf.util.CoffeeScriptTask">
            <classpath>

                <pathelement location="common/target/scala-2.11/classes"/>
                <pathelement location="src/target/scala-2.11/classes"/>

                <pathelement location="src/main/resources"/>
                <pathelement location="lib/rhino-1.7R2.jar"/>
                <pathelement location="lib/commons-fileupload-1.2.2.jar"/>
                <pathelement location="lib/log4j-1.2.17.jar"/>
                <pathelement location="lib/scala-library-2.11.8.jar"/>
                <pathelement location="lib/orbeon-errorified-20150511.jar"/>
            </classpath>
        </taskdef>

        <!-- Compile CoffeeScript -->
        <coffee-script fromdir="src/resources-packaged" todir="build/js">
            <include name="**/*.coffee"/>
        </coffee-script>
        <coffee-script fromdir="src/resources" todir="build/js">
            <include name="**/*.coffee"/>
        </coffee-script>
        <coffee-script fromdir="form-builder/src/main/resources" todir="build/js">
            <include name="**/*.coffee"/>
        </coffee-script>

        <!-- Compile Scala.js -->
        <if>
            <isset property="skip.compilation"/>
            <then>
                <!-- This does in fact compile Scala.js files, but does not run the expensive optimizations -->
                <exec executable="sbt" failonerror="true">
                    <arg value="-Dorbeon.version=${release.number}"/>
                    <arg value="-Dorbeon.edition=${edition}"/>
                    <arg value="project formBuilderClient"/>
                    <arg value="fastOptJSToExplodedWar"/>
                </exec>
            </then>
            <else>
                <exec executable="sbt" failonerror="true">
                    <arg value="-Dorbeon.version=${release.number}"/>
                    <arg value="-Dorbeon.edition=${edition}"/>
                    <arg value="project formBuilderClient"/>
                    <arg value="fullOptJSToExplodedWar"/>
                </exec>
            </else>
        </if>

        <!-- Copy non-minimized CoffeeScript resources -->
        <copy todir="build/orbeon-war/WEB-INF/resources">
            <fileset dir="build/js">
                <include name="**/*.js"/>
            </fileset>
        </copy>

        <!-- Minimize compiled CoffeeScript -->
        <yui-compressor warn="false" charset="UTF-8" fromdir="build/js" todir="build/orbeon-war/WEB-INF/resources">
            <include name="**/*.js"/>
        </yui-compressor>

        <!-- Minimize JavaScript-->
        <yui-compressor warn="false" charset="UTF-8" fromdir="src/resources-packaged" todir="build/orbeon-war/WEB-INF/resources">

            <!-- Orbeon JavaScript code -->
            <include name="ops/javascript/xforms.js"/>
            <include name="ops/javascript/orbeon/**/*.js"/>

            <!-- YUI file we changed -->
            <include name="ops/yui/button/button.js"/>
            <include name="ops/yui/container/container.js"/>
            <include name="ops/yui/connection/connection.js"/>
            <include name="ops/yui/calendar/calendar.js"/>
            <include name="ops/yui/treeview/treeview.js"/>
            <include name="ops/yui/examples/treeview/assets/js/TaskNode.js"/>
            <include name="ops/yui/examples/treeview/assets/js/CheckOnClickNode.js"/>

            <!-- Other files  -->
            <include name="ops/nprogress-0.2.0/nprogress.js"/>
            <include name="ops/javascript/fastclick/fastclick.js"/>

        </yui-compressor>

        <!-- Form Runner JavaScript -->
        <yui-compressor warn="false" charset="UTF-8" fromdir="form-runner/src/main/resources" todir="build/orbeon-war/WEB-INF/resources">
            <include name="apps/fr/script/form-runner.js"/>
        </yui-compressor>

        <!-- Form Builder JavaScript -->
        <yui-compressor warn="false" charset="UTF-8" fromdir="form-builder/src/main/resources" todir="build/orbeon-war/WEB-INF/resources">
            <include name="xbl/fb/dialog-itemsets/dialog-itemsets.js"/>
        </yui-compressor>

    </target>

    <target name="test-expand-war" depends="orbeon-dist-war">
        <!-- Uncompress WAR -->
        <unzip src="build/distrib/${versioned-name}.war" dest="build/orbeon-war-tomcat"/>
        <!-- Copy test resources -->
        <!-- TODO: We're mixing here the resources used by standalone tests and tests running in Tomcat -->
        <mkdir dir="build/orbeon-war-tomcat/WEB-INF/resources/apps/unit-tests"/>
        <copy todir="build/orbeon-war-tomcat/WEB-INF/resources">
            <fileset dir="src/test/resources/">
                <include name="apps/unit-tests/**"/>
                <include name="config/**"/>
            </fileset>
        </copy>
    </target>

    <target name="skip-selenium">
        <property name="skip.selenium" value="true"/>
    </target>
    <target name="skip-database">
        <property name="skip.database" value="true"/>
    </target>

    <target name="test-unit" depends="skip-selenium, test"/>

    <target name="test" depends="test-expand-war, test-classes">

        <property name="tomcat-version" value="6.0.36"/>
        <parallel failonany="true">

            <property name="oracle.driver"     value="oracle.jdbc.OracleDriver"/>
            <property name="oracle.jar"        value="lib/oracle/ojdbc6_g.jar"/>
            <property name="mysql.driver"      value="com.mysql.jdbc.Driver"/>
            <property name="mysql.jar"         value="lib/mysql-connector-java-5.1.26-bin.jar"/>
            <property name="sqlserver.driver"  value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
            <property name="sqlserver.jar"     value="lib/sqljdbc4.jar"/>
            <property name="postgresql.driver" value="org.postgresql.Driver"/>
            <property name="postgresql.jar"    value="lib/postgresql-9.3-1102.jdbc4.jar"/>

            <!-- Run Tomcat -->
            <sequential>
                <if>
                    <not><isset property="skip.selenium"/></not>
                    <then>

                        <!-- Only keep the 10 most recent databases on SQL Server -->
                        <!-- - Set delimiter to character we don't use, so the task doesn't spit the command on ';' -->
                        <sql    driver="${sqlserver.driver}" url="${env.SQLSERVER_URL}"
                                userid="orbeon" password="${env.RDS_PASSWORD}"
                                expandProperties="true" delimiter="~"
                                autocommit="true">
                            <classpath><pathelement location="${sqlserver.jar}"/></classpath>
                            BEGIN
                                DECLARE @qry nvarchar(max);
                                SELECT @qry =
                                    (
                                        SELECT 'DROP DATABASE ' + to_drop.name + '; '
                                        FROM
                                            (
                                                SELECT all_dbs.name
                                                FROM
                                                    (
                                                        SELECT row_number() OVER (ORDER BY name DESC) AS row,
                                                               name
                                                        FROM   sys.databases
                                                        WHERE  name LIKE 'orbeon_%_tomcat'
                                                    ) all_dbs
                                                WHERE all_dbs.row > 10
                                            ) to_drop
                                        WHERE name LIKE 'orbeon_%_tomcat'
                                        FOR XML PATH('')
                                    );
                                EXEC sp_executesql @qry;
                            END;
                        </sql>

                        <!-- Create schemas -->
                        <sql driver="${oracle.driver}" url="${env.ORACLE_URL}" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true">
                            <classpath><pathelement location="${oracle.jar}"/></classpath>
                            CREATE USER              orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat IDENTIFIED BY ${env.RDS_PASSWORD};
                            ALTER  USER              orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat QUOTA UNLIMITED ON users;
                            GRANT  CREATE SESSION TO orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                            GRANT  CREATE TABLE   TO orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                            GRANT  CREATE TRIGGER TO orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                        </sql>
                        <sql driver="${mysql.driver}" url="${env.MYSQL_URL}" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true">
                            <classpath><pathelement location="${mysql.jar}"/></classpath>
                            CREATE DATABASE orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                        </sql>
                        <sql driver="${sqlserver.driver}" url="${env.SQLSERVER_URL}" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true">
                            <classpath><pathelement location="${sqlserver.jar}"/></classpath>
                            CREATE DATABASE orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                        </sql>
                        <sql driver="${postgresql.driver}" url="${env.POSTGRESQL_URL}/orbeon" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true" autocommit="true">
                            <classpath><pathelement location="${postgresql.jar}"/></classpath>
                            CREATE DATABASE orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                        </sql>

                        <!-- Uncompress Tomcat -->
                        <if>
                            <not><available file="build/apache-tomcat-${tomcat-version}"/></not>
                            <then><unzip src="lib/test/apache-tomcat-${tomcat-version}.zip" dest="build"/></then>
                        </if>

                        <!-- Put database driver in Tomcat's lib -->
                        <copy file="${mysql.jar}"      todir="build/apache-tomcat-${tomcat-version}/lib"/>
                        <copy file="${oracle.jar}"     todir="build/apache-tomcat-${tomcat-version}/lib"/>
                        <copy file="${sqlserver.jar}"  todir="build/apache-tomcat-${tomcat-version}/lib"/>
                        <copy file="${postgresql.jar}" todir="build/apache-tomcat-${tomcat-version}/lib"/>

                        <!-- Put URL and passwords in Tomcat's server.xml -->
                        <replace file="test/catalina_base/conf/server.xml">
                            <replacefilter token="@RDS_PASSWORD@"         value="${env.RDS_PASSWORD}"/>
                            <replacefilter token="@TRAVIS_BUILD_NUMBER@"  value="${env.TRAVIS_BUILD_NUMBER}"/>
                            <replacefilter token="@ORACLE_URL@"           value="${env.ORACLE_URL}"/>
                            <replacefilter token="@MYSQL_URL@"            value="${env.MYSQL_URL}"/>
                            <replacefilter token="@SQLSERVER_URL@"        value="${env.SQLSERVER_URL}"/>
                            <replacefilter token="@POSTGRESQL_URL@"       value="${env.POSTGRESQL_URL}"/>
                        </replace>

                        <!-- Run -->
                        <java jar="build/apache-tomcat-${tomcat-version}/bin/bootstrap.jar" fork="true" taskname="tomcat">
                            <jvmarg value="-Dcatalina.home=build/apache-tomcat-${tomcat-version}"/>
                            <jvmarg value="-Dcatalina.base=test/catalina_base"/>
                            <jvmarg line="-server -verbosegc -Xms256m -Xmx1024m -XX:MaxPermSize=256m -Djava.awt.headless=true -XX:+PerfDisableSharedMem"/>
                            <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=61155"/>
                        </java>
                        <delete dir="test/catalina_base/work"/>
                    </then>
                </if>
            </sequential>

            <sequential>

                <if>
                    <not><isset property="skip.selenium"/></not>
                    <then>
                        <!-- Wait for Tomcat to start -->
                        <waitfor maxwait="1" maxwaitunit="minute" checkevery="200">
                            <http url="http://localhost:8080/orbeon/home/"/>
                        </waitfor>
                    </then>
                </if>

                <delete dir="build/temp/test"/>
               	<mkdir  dir="build/temp/test"/>
           	    <delete dir="${test.exist-db.dir}"/>
               	<mkdir  dir="${test.exist-db.dir}"/>

                <!-- Run tests -->
                <junit fork="true" printsummary="true" showoutput="yes" failureproperty="test.failed" logfailedtests="true">
                    <!-- Enable assertions -->
                    <jvmarg value="-ea"/>
                    <jvmarg line="-server -Djava.awt.headless=true"/>
                    <jvmarg line="-Xms256m -Xmx1024m -XX:MaxPermSize=256m"/>
                    <!--<jvmarg line="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=61155"/>-->

                    <batchtest>
                        <fileset dir="src/target/scala-2.11/test-classes">
                            <include name="org/orbeon/**/*Test.class"/>
                            <exclude name="org/orbeon/oxf/client/CombinedClientTest*.class" if="skip.selenium"/>
                            <!-- 2016-08-05: Temporary exclude until we figure out how to run on Travis. -->
                            <exclude name="org/orbeon/oxf/fr/persistence/rest/*Test.class"/>
                        </fileset>
                        <fileset dir="dom/target/scala-2.11/test-classes">
                            <include name="org/orbeon/**/*Test.class"/>
                        </fileset>
                        <fileset dir="common/target/scala-2.11/test-classes">
                            <include name="org/orbeon/**/*Test.class"/>
                        </fileset>
                    </batchtest>

                    <!-- Configure resource manager -->
                    <sysproperty key="oxf.resources.factory" value="org.orbeon.oxf.resources.PriorityResourceManagerFactory"/>
                    <!-- 1: test/resources first, as we need to touch files and compile Java files there -->
                    <sysproperty key="oxf.resources.priority.1" value="org.orbeon.oxf.resources.FilesystemResourceManagerFactory"/>
                    <sysproperty key="oxf.resources.priority.1.oxf.resources.filesystem.sandbox-directory" value="src/test/resources"/>
                    <!-- 2: resources -->
                    <sysproperty key="oxf.resources.priority.2" value="org.orbeon.oxf.resources.FilesystemResourceManagerFactory"/>
                    <sysproperty key="oxf.resources.priority.2.oxf.resources.filesystem.sandbox-directory" value="src/resources"/>
                    <!-- 3: resources-packaged -->
                    <sysproperty key="oxf.resources.priority.3" value="org.orbeon.oxf.resources.FilesystemResourceManagerFactory"/>
                    <sysproperty key="oxf.resources.priority.3.oxf.resources.filesystem.sandbox-directory" value="src/resources-packaged"/>
                    <!-- 4: main/resources (associated with Java test files) -->
                    <sysproperty key="oxf.resources.priority.4" value="org.orbeon.oxf.resources.FilesystemResourceManagerFactory"/>
                    <sysproperty key="oxf.resources.priority.4.oxf.resources.filesystem.sandbox-directory" value="src/main/resources"/>
                    <!-- Classpath -->
                    <sysproperty key="oxf.resources.priority.5" value="org.orbeon.oxf.resources.ClassLoaderResourceManagerFactory"/>
                    <!-- Other properties -->
                    <sysproperty key="oxf.resources.common.min-reload-interval" value="50"/>
                    <sysproperty key="oxf.test.config" value="oxf:/ops/unit-tests/tests.xml"/>
                	<sysproperty key="java.io.tmpdir" value="build/temp/test"/>

                    <!-- Some code uses the default time zone, which might different on different system, so we need to set it explicitly -->
                	<sysproperty key="user.timezone" value="America/Los_Angeles"/>
                    <!-- Getting a JDK error, per http://stackoverflow.com/a/13575810/5295 -->
                	<sysproperty key="java.util.Arrays.useLegacyMergeSort" value="true"/>

                    <classpath>
                        <!-- Target classes -->
                        <!-- Could also be: build/orbeon-war-tomcat/WEB-INF/lib-->
                        <fileset dir="build/orbeon-war/WEB-INF/lib">
                            <include name="*.jar"/>
                        </fileset>
                        <!-- Test classes -->
                        <pathelement location="src/target/scala-2.11/test-classes"/>
                        <pathelement location="common/target/scala-2.11/test-classes"/>
                        <pathelement location="dom/target/scala-2.11/test-classes"/>
                        <!-- JUnit proper -->
                        <pathelement location="lib/junit-4.11.jar"/>
                        <pathelement location="lib/ant-junit-1.7.1.jar"/>
                        <pathelement location="lib/mockito-all-1.8.5.jar"/>
                        <pathelement location="lib/scalatest_2.11-2.2.4.jar"/>
                        <pathelement location="lib/servlet-2_3-4_0_4.jar"/>
                        <pathelement location="lib/portlet-api_2.0.jar"/>
                        <pathelement location="lib/liferay-portal-service-6.1.1.jar"/>
                        <pathelement location="${oracle.jar}"/>
                        <pathelement location="${mysql.jar}"/>
                        <pathelement location="${sqlserver.jar}"/>
                        <pathelement location="${postgresql.jar}"/>
                    </classpath>
                    <formatter usefile="false" classname="org.orbeon.junit.LiveResultFormatter"/>
                </junit>

                <!-- Stop Tomcat -->
                <if>
                    <not><isset property="skip.selenium"/></not>
                    <then>
                        <!-- Stop Tomcat -->
                        <java jar="build/apache-tomcat-${tomcat-version}/bin/bootstrap.jar" fork="true">
                            <jvmarg value="-Dcatalina.home=build/apache-tomcat-${tomcat-version}"/>
                            <arg line="stop"/>
                        </java>
                        <!-- If we don't wait for Tomcat to be really stopped, databases won't let us users/schemas we're connected to
                             (todo: find a better way to know when Tomcat has properly shut down) -->
                        <sleep seconds="20"/>
                        <!-- Delete schemas -->
                        <sql driver="${oracle.driver}" url="${env.ORACLE_URL}" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true">
                            <classpath><pathelement location="${oracle.jar}"/></classpath>
                            DROP USER orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat CASCADE;
                        </sql>
                        <sql driver="${mysql.driver}" url="${env.MYSQL_URL}" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true">
                            <classpath><pathelement location="${mysql.jar}"/></classpath>
                            DROP DATABASE orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                        </sql>
                        <sql driver="${sqlserver.driver}" url="${env.SQLSERVER_URL}" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true">
                            <classpath><pathelement location="${sqlserver.jar}"/></classpath>
                            DROP DATABASE orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                        </sql>
                        <sql driver="${postgresql.driver}" url="${env.POSTGRESQL_URL}/orbeon" userid="orbeon" password="${env.RDS_PASSWORD}" expandProperties="true" autocommit="true">
                            <classpath><pathelement location="${postgresql.jar}"/></classpath>
                            DROP DATABASE orbeon_${env.TRAVIS_BUILD_NUMBER}_tomcat;
                        </sql>
                    </then>
                </if>

                <!-- If tests failed, stop after cleanup -->
                <fail message="JUnit tests failed" if="test.failed"/>

            </sequential>
        </parallel>

    </target>

    <target name="orbeon-dist-packages" depends="orbeon-dist-war, proxy-portlet-war, embedding-war, orbeon-auth-war, orbeon-src">
        <!-- Create temporary zip file -->
        <property name="tmp-zip" value="build/distrib/${versioned-name}-tmp.zip"/>
        <zip zipfile="${tmp-zip}">
            <zipfileset dir="build/distrib" fullpath="${versioned-name}/orbeon.war">
                <include name="${versioned-name}.war"/>
            </zipfileset>
            <zipfileset dir="build/distrib" fullpath="${versioned-name}/orbeon-auth.war">
                <include name="orbeon-auth.war"/>
            </zipfileset>
            <zipfileset file="README.md" prefix="${versioned-name}"/>
            <zipfileset file="README.md" fullpath="${versioned-name}/README.txt"/>
            <zipfileset file="LICENSE.txt" prefix="${versioned-name}"/>
            <zipfileset dir="third-party-licenses" prefix="${versioned-name}/third-party-licenses"/>
            <zipfileset dir="${examples-cli-src.dir}" prefix="${versioned-name}/examples-cli"/>
        </zip>
        <!-- Fix EOL for Windows platform -->
        <delete dir="build/temp/distrib"/>
        <mkdir dir="build/temp/distrib"/>
        <unzip src="${tmp-zip}" dest="build/temp/distrib"/>
        <fixcrlf srcDir="build/temp/distrib" eol="crlf">
            <include name="**/*.txt"/>
            <include name="**/*.xml"/>
            <include name="**/*.xsl"/>
            <include name="**/*.xpl"/>
            <include name="**/*.jsp"/>
            <include name="**/*.jspx"/>
            <include name="**/*.html"/>
            <include name="**/*.htm"/>
            <include name="**/*.js"/>
            <include name="**/*.css"/>
            <include name="**/*.java"/>
            <include name="**/*.properties"/>
            <include name="**/*.rng"/>
            <include name="**/*.xsd"/>
            <include name="**/*.xhtml"/>
            <include name="**/*.wsdl"/>
        </fixcrlf>
        <zip zipfile="build/distrib/${versioned-name}.zip" basedir="build/temp/distrib"/>
        <!-- Fix EOL for Unix platform -->
        <fixcrlf srcDir="build/temp/distrib" eol="lf">
            <include name="**/*.txt"/>
            <include name="**/*.xml"/>
            <include name="**/*.xsl"/>
            <include name="**/*.xpl"/>
            <include name="**/*.jsp"/>
            <include name="**/*.jspx"/>
            <include name="**/*.html"/>
            <include name="**/*.htm"/>
            <include name="**/*.js"/>
            <include name="**/*.css"/>
            <include name="**/*.java"/>
            <include name="**/*.properties"/>
            <include name="**/*.rng"/>
            <include name="**/*.xsd"/>
            <include name="**/*.xhtml"/>
            <include name="**/*.wsdl"/>
        </fixcrlf>
        <tar tarfile="build/distrib/${versioned-name}.tgz" compression="gzip" basedir="build/temp/distrib"/>
        <delete file="${tmp-zip}"/>
    </target>

    <target name="orbeon-dist-checksum" depends="orbeon-dist-packages">
        <!-- Create md5 for all files -->
        <checksum algorithm="MD5">
            <fileset dir="build/distrib">
                <include name="*.*"/>
            </fileset>
        </checksum>
    </target>

    <target name="orbeon-dist" depends="orbeon-dist-checksum"/>

    <target name="exist-task" depends="classes">
        <!-- eXist tasks -->
        <!-- http://exist-db.org/ant-tasks.html -->
        <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
            <classpath>
                <path refid="class.path"/>
                <pathelement location="common/target/scala-2.11/classes"/>
                <pathelement location="dom/target/scala-2.11/classes"/>
                <pathelement location="src/target/scala-2.11/classes"/>
            </classpath>
        </typedef>
    </target>

    <target name="exist-export-from-web-inf" depends="exist-task">
        <delete dir="build/exist-data-exported"/>
        <mkdir dir="build/exist-data-exported"/>
        <xdb:extract
            configuration="build/orbeon-war/WEB-INF/exist-conf.xml"
            uri="xmldb:exist:///db"
            initDb="true"
            destdir="build/exist-data-exported"
            subcollections="true"
            createdirectories="true"/>
        <move todir="build/exist-data-exported" includeEmptyDirs="false">
            <fileset dir="build/exist-data-exported">
                <include name="**/*.xhtml.xml"/>
            </fileset>
            <globmapper from="*.xhtml.xml" to="*.xhtml"/>
        </move>
    </target>

    <target name="exist-import-sample-data-to-build" depends="exist-task">
        <delete dir="build/exist-data"/>
        <mkdir dir="build/exist-data"/>
        <!-- Store config first -->
        <xdb:store
            configuration="${basedir}/descriptors/ant-exist-conf.xml"
            uri="xmldb:exist:///db"
            initDb="true"
            createcollection="true"
            createsubcollections="true"
            user="admin"
            password="">
            <fileset dir="data">
                <include name="system/**"/>
            </fileset>
        </xdb:store>
        <!-- Store data -->
        <xdb:store
            configuration="${basedir}/descriptors/ant-exist-conf.xml"
            uri="xmldb:exist:///db"
            initDb="true"
            createcollection="true"
            createsubcollections="true"
            user="guest"
            password="guest">
            <fileset dir="data">
                <include name="orbeon/**"/>
            </fileset>
        </xdb:store>
        <!-- Make sure the database is shut down -->
        <xdb:shutdown
            configuration="${basedir}/descriptors/ant-exist-conf.xml"
            uri="xmldb:exist:///db"
            user="admin"
            password=""/>
    </target>

    <!-- NOTE: You need to comment out the eXist security filter for this to work -->
    <target name="exist-import-sample-data-to-localhost" depends="exist-task">
        <!-- Store config first -->
        <xdb:store
            uri="xmldb:exist://localhost:8080/orbeon/exist/xmlrpc/db"
            initDb="true"
            createcollection="true"
            createsubcollections="true"
            user="admin"
            password="">
            <fileset dir="data">
                <include name="system/**"/>
            </fileset>
        </xdb:store>
        <!-- Store data only -->
        <xdb:store
            uri="xmldb:exist://localhost:8080/orbeon/exist/xmlrpc/db"
            initDb="true"
            createcollection="true"
            createsubcollections="true"
            user="guest"
            password="guest">
            <fileset dir="data">
                <include name="orbeon/**"/>
            </fileset>
        </xdb:store>
    </target>

</project>
